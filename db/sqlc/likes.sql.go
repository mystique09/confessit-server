// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: likes.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createPostLike = `-- name: CreatePostLike :one
INSERT INTO "likes" (id, post_id, user_identity_id) VALUES ($1, $2, $3) RETURNING id, user_identity_id, post_id, type
`

type CreatePostLikeParams struct {
	ID             uuid.UUID `json:"id"`
	PostID         uuid.UUID `json:"post_id"`
	UserIdentityID uuid.UUID `json:"user_identity_id"`
}

func (q *Queries) CreatePostLike(ctx context.Context, arg CreatePostLikeParams) (Like, error) {
	row := q.queryRow(ctx, q.createPostLikeStmt, createPostLike, arg.ID, arg.PostID, arg.UserIdentityID)
	var i Like
	err := row.Scan(
		&i.ID,
		&i.UserIdentityID,
		&i.PostID,
		&i.Type,
	)
	return i, err
}

const deletePostLike = `-- name: DeletePostLike :one
DELETE FROM "likes" WHERE post_id = $1 AND user_identity_id = $2 RETURNING id, user_identity_id, post_id, type
`

type DeletePostLikeParams struct {
	PostID         uuid.UUID `json:"post_id"`
	UserIdentityID uuid.UUID `json:"user_identity_id"`
}

func (q *Queries) DeletePostLike(ctx context.Context, arg DeletePostLikeParams) (Like, error) {
	row := q.queryRow(ctx, q.deletePostLikeStmt, deletePostLike, arg.PostID, arg.UserIdentityID)
	var i Like
	err := row.Scan(
		&i.ID,
		&i.UserIdentityID,
		&i.PostID,
		&i.Type,
	)
	return i, err
}

const listAllPostLikes = `-- name: ListAllPostLikes :many
SELECT id, user_identity_id, post_id, type FROM "likes" WHERE post_id = $1
`

func (q *Queries) ListAllPostLikes(ctx context.Context, postID uuid.UUID) ([]Like, error) {
	rows, err := q.query(ctx, q.listAllPostLikesStmt, listAllPostLikes, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Like
	for rows.Next() {
		var i Like
		if err := rows.Scan(
			&i.ID,
			&i.UserIdentityID,
			&i.PostID,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: sessions.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const blockSession = `-- name: BlockSession :one
UPDATE "sessions"
SET is_blocked = true
WHERE id = $1
RETURNING id
`

func (q *Queries) BlockSession(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.queryRow(ctx, q.blockSessionStmt, blockSession, id)
	err := row.Scan(&id)
	return id, err
}

const createSession = `-- name: CreateSession :one
INSERT INTO "sessions"(
    id,
    user_id,
    username,
    refresh_token,
    user_agent,
    client_ip,
    is_blocked,
    expires_at 
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, user_id, username, refresh_token, user_agent, client_ip, is_blocked, created_at, expires_at
`

type CreateSessionParams struct {
	ID           uuid.UUID `json:"id"`
	UserID       uuid.UUID `json:"user_id"`
	Username     string    `json:"username"`
	RefreshToken string    `json:"refresh_token"`
	UserAgent    string    `json:"user_agent"`
	ClientIp     string    `json:"client_ip"`
	IsBlocked    bool      `json:"is_blocked"`
	ExpiresAt    time.Time `json:"expires_at"`
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.queryRow(ctx, q.createSessionStmt, createSession,
		arg.ID,
		arg.UserID,
		arg.Username,
		arg.RefreshToken,
		arg.UserAgent,
		arg.ClientIp,
		arg.IsBlocked,
		arg.ExpiresAt,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteSession = `-- name: DeleteSession :one
DELETE FROM "sessions"
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.queryRow(ctx, q.deleteSessionStmt, deleteSession, id)
	err := row.Scan(&id)
	return id, err
}

const deleteSessionByUserId = `-- name: DeleteSessionByUserId :one
DELETE FROM "sessions"
WHERE user_id = $1
RETURNING id
`

func (q *Queries) DeleteSessionByUserId(ctx context.Context, userID uuid.UUID) (uuid.UUID, error) {
	row := q.queryRow(ctx, q.deleteSessionByUserIdStmt, deleteSessionByUserId, userID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getSessionById = `-- name: GetSessionById :one
SELECT id, user_id, username, refresh_token, user_agent, client_ip, is_blocked, created_at, expires_at
FROM "sessions"
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetSessionById(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.queryRow(ctx, q.getSessionByIdStmt, getSessionById, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.RefreshToken,
		&i.UserAgent,
		&i.ClientIp,
		&i.IsBlocked,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

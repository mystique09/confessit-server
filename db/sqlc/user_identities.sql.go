// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user_identities.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUserIdentity = `-- name: CreateUserIdentity :one
INSERT INTO "user_identities"(
	id,
	user_id,
	identity_hash
) VALUES (
	$1, $2, $3
) RETURNING id, user_id, identity_hash
`

type CreateUserIdentityParams struct {
	ID           uuid.UUID `json:"id"`
	UserID       uuid.UUID `json:"user_id"`
	IdentityHash uuid.UUID `json:"identity_hash"`
}

func (q *Queries) CreateUserIdentity(ctx context.Context, arg CreateUserIdentityParams) (UserIdentity, error) {
	row := q.queryRow(ctx, q.createUserIdentityStmt, createUserIdentity, arg.ID, arg.UserID, arg.IdentityHash)
	var i UserIdentity
	err := row.Scan(&i.ID, &i.UserID, &i.IdentityHash)
	return i, err
}

const getUserIdentityById = `-- name: GetUserIdentityById :one
SELECT id, user_id, identity_hash FROM "user_identities" WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserIdentityById(ctx context.Context, id uuid.UUID) (UserIdentity, error) {
	row := q.queryRow(ctx, q.getUserIdentityByIdStmt, getUserIdentityById, id)
	var i UserIdentity
	err := row.Scan(&i.ID, &i.UserID, &i.IdentityHash)
	return i, err
}

const getUserIdentityByUserId = `-- name: GetUserIdentityByUserId :one
SELECT id, user_id, identity_hash FROM "user_identities" WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserIdentityByUserId(ctx context.Context, userID uuid.UUID) (UserIdentity, error) {
	row := q.queryRow(ctx, q.getUserIdentityByUserIdStmt, getUserIdentityByUserId, userID)
	var i UserIdentity
	err := row.Scan(&i.ID, &i.UserID, &i.IdentityHash)
	return i, err
}

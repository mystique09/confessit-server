// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: message.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createMessage = `-- name: CreateMessage :one
INSERT INTO "message" (
    id, receiver_id, content
) VALUES (
    $1, $2, $3
) RETURNING id, receiver_id, content, seen, created_at, updated_at
`

type CreateMessageParams struct {
	ID         uuid.UUID `json:"id"`
	ReceiverID uuid.UUID `json:"receiver_id"`
	Content    string    `json:"content"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (Message, error) {
	row := q.queryRow(ctx, q.createMessageStmt, createMessage, arg.ID, arg.ReceiverID, arg.Content)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ReceiverID,
		&i.Content,
		&i.Seen,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteOneMessage = `-- name: DeleteOneMessage :one
DELETE FROM "message"
WHERE id = $1 AND receiver_id = $2
RETURNING id
`

type DeleteOneMessageParams struct {
	ID         uuid.UUID `json:"id"`
	ReceiverID uuid.UUID `json:"receiver_id"`
}

func (q *Queries) DeleteOneMessage(ctx context.Context, arg DeleteOneMessageParams) (uuid.UUID, error) {
	row := q.queryRow(ctx, q.deleteOneMessageStmt, deleteOneMessage, arg.ID, arg.ReceiverID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getMessageById = `-- name: GetMessageById :one
SELECT id, receiver_id, content, seen, created_at, updated_at
FROM "message"
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetMessageById(ctx context.Context, id uuid.UUID) (Message, error) {
	row := q.queryRow(ctx, q.getMessageByIdStmt, getMessageById, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.ReceiverID,
		&i.Content,
		&i.Seen,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listMessage = `-- name: ListMessage :many
SELECT id, receiver_id, content, seen, created_at, updated_at
FROM "message"
WHERE receiver_id = $1
LIMIT 20
OFFSET $2
`

type ListMessageParams struct {
	ReceiverID uuid.UUID `json:"receiver_id"`
	Offset     int32     `json:"offset"`
}

func (q *Queries) ListMessage(ctx context.Context, arg ListMessageParams) ([]Message, error) {
	rows, err := q.query(ctx, q.listMessageStmt, listMessage, arg.ReceiverID, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.ReceiverID,
			&i.Content,
			&i.Seen,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMessageStatus = `-- name: UpdateMessageStatus :one
UPDATE "message"
SET seen = TRUE
WHERE id = $1 AND receiver_id = $2
RETURNING id
`

type UpdateMessageStatusParams struct {
	ID         uuid.UUID `json:"id"`
	ReceiverID uuid.UUID `json:"receiver_id"`
}

func (q *Queries) UpdateMessageStatus(ctx context.Context, arg UpdateMessageStatusParams) (uuid.UUID, error) {
	row := q.queryRow(ctx, q.updateMessageStatusStmt, updateMessageStatus, arg.ID, arg.ReceiverID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

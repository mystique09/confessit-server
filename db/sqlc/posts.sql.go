// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: posts.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (id, content, user_identity_id) VALUES ($1, $2, $3) RETURNING id, content, user_identity_id, created_at, updated_at
`

type CreatePostParams struct {
	ID             uuid.UUID `json:"id"`
	Content        string    `json:"content"`
	UserIdentityID uuid.UUID `json:"user_identity_id"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.queryRow(ctx, q.createPostStmt, createPost, arg.ID, arg.Content, arg.UserIdentityID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserIdentityID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :one
DELETE FROM posts WHERE id = $1 RETURNING id
`

func (q *Queries) DeletePost(ctx context.Context, id uuid.UUID) (uuid.UUID, error) {
	row := q.queryRow(ctx, q.deletePostStmt, deletePost, id)
	err := row.Scan(&id)
	return id, err
}

const getPostById = `-- name: GetPostById :one
SELECT id, content, user_identity_id, created_at, updated_at FROM posts WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPostById(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.queryRow(ctx, q.getPostByIdStmt, getPostById, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserIdentityID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllPosts = `-- name: ListAllPosts :many
SELECT id, content, user_identity_id, created_at, updated_at FROM posts ORDER BY created_at DESC LIMIT 20 OFFSET $1
`

func (q *Queries) ListAllPosts(ctx context.Context, offset int32) ([]Post, error) {
	rows, err := q.query(ctx, q.listAllPostsStmt, listAllPosts, offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Content,
			&i.UserIdentityID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts SET content = $1 WHERE id = $2 RETURNING id
`

type UpdatePostParams struct {
	Content string    `json:"content"`
	ID      uuid.UUID `json:"id"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (uuid.UUID, error) {
	row := q.queryRow(ctx, q.updatePostStmt, updatePost, arg.Content, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

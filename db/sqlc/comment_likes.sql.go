// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: comment_likes.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createCommentLike = `-- name: CreateCommentLike :one
INSERT INTO "comment_likes" (id, comment_id, user_identity_id, type) VALUES ($1, $2, $3, $4) RETURNING id, user_identity_id, comment_id, type
`

type CreateCommentLikeParams struct {
	ID             uuid.UUID        `json:"id"`
	CommentID      uuid.UUID        `json:"comment_id"`
	UserIdentityID uuid.UUID        `json:"user_identity_id"`
	Type           NullSatisfaction `json:"type"`
}

func (q *Queries) CreateCommentLike(ctx context.Context, arg CreateCommentLikeParams) (CommentLike, error) {
	row := q.queryRow(ctx, q.createCommentLikeStmt, createCommentLike,
		arg.ID,
		arg.CommentID,
		arg.UserIdentityID,
		arg.Type,
	)
	var i CommentLike
	err := row.Scan(
		&i.ID,
		&i.UserIdentityID,
		&i.CommentID,
		&i.Type,
	)
	return i, err
}

const deleteCommentLike = `-- name: DeleteCommentLike :one
DELETE FROM "comment_likes" WHERE comment_id = $1 AND user_identity_id = $2 RETURNING id, user_identity_id, comment_id, type
`

type DeleteCommentLikeParams struct {
	CommentID      uuid.UUID `json:"comment_id"`
	UserIdentityID uuid.UUID `json:"user_identity_id"`
}

func (q *Queries) DeleteCommentLike(ctx context.Context, arg DeleteCommentLikeParams) (CommentLike, error) {
	row := q.queryRow(ctx, q.deleteCommentLikeStmt, deleteCommentLike, arg.CommentID, arg.UserIdentityID)
	var i CommentLike
	err := row.Scan(
		&i.ID,
		&i.UserIdentityID,
		&i.CommentID,
		&i.Type,
	)
	return i, err
}

const listAllCommentLikes = `-- name: ListAllCommentLikes :many
SELECT id, user_identity_id, comment_id, type FROM "comment_likes" WHERE comment_id = $1
`

func (q *Queries) ListAllCommentLikes(ctx context.Context, commentID uuid.UUID) ([]CommentLike, error) {
	rows, err := q.query(ctx, q.listAllCommentLikesStmt, listAllCommentLikes, commentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CommentLike
	for rows.Next() {
		var i CommentLike
		if err := rows.Scan(
			&i.ID,
			&i.UserIdentityID,
			&i.CommentID,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
